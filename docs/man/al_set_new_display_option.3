.TH al_set_new_display_option 3 "" "Allegro reference manual"
.SH NAME
.PP
al_set_new_display_option
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <allegro5/allegro.h>

void\ al_set_new_display_option(int\ option,\ int\ value,\ int\ importance)
\f[]
.fi
.SH DESCRIPTION
.PP
Set an extra display option, to be used when creating new displays
on the calling thread.
Display options differ from display flags, and specify some details
of the context to be created within the window itself.
These mainly have no effect on Allegro itself, but you may want to
specify them, for example if you want to use multisampling.
.PP
The `importance' parameter can be either:
.IP \[bu] 2
ALLEGRO_REQUIRE - The display will not be created if the setting
can not be met.
.IP \[bu] 2
ALLEGRO_SUGGEST - If the setting is not available, the display will
be created anyway.
FIXME: We need a way to query the settings back from a created
display.
.IP \[bu] 2
ALLEGRO_DONTCARE - If you added a display option with one of the
above two settings before, it will be removed again.
Else this does nothing.
.PP
The supported options are:
.IP \[bu] 2
ALLEGRO_RED_SIZE
.IP \[bu] 2
ALLEGRO_GREEN_SIZE
.IP \[bu] 2
ALLEGRO_BLUE_SIZE
.IP \[bu] 2
ALLEGRO_ALPHA_SIZE
.IP \[bu] 2
ALLEGRO_COLOR_SIZE
.IP \[bu] 2
ALLEGRO_RED_SHIFT
.IP \[bu] 2
ALLEGRO_GREEN_SHIFT
.IP \[bu] 2
ALLEGRO_BLUE_SHIFT
.IP \[bu] 2
ALLEGRO_ALPHA_SHIFT: These settings can be used to specify the
pixel layout the display should use.
.IP \[bu] 2
ALLEGRO_ACC_RED_SIZE
.IP \[bu] 2
ALLEGRO_ACC_GREEN_SIZE
.IP \[bu] 2
ALLEGRO_ACC_BLUE_SIZE
.IP \[bu] 2
ALLEGRO_ACC_ALPHA_SIZE: This and the preceding three settings can
be used to define the required accumulation buffer size.
.IP \[bu] 2
ALLEGRO_STEREO: Whether the display is a stereo display.
.IP \[bu] 2
ALLEGRO_AUX_BUFFERS: Number of auxiliary buffers the display should
have.
.IP \[bu] 2
ALLEGRO_DEPTH_SIZE: How many depth buffer (z-buffer) bits to use.
.IP \[bu] 2
ALLEGRO_STENCIL_SIZE: How many bits to use for the stencil buffer.
.IP \[bu] 2
ALLEGRO_SAMPLE_BUFFERS: Whether to use multisampling (1) or not
(0).
.IP \[bu] 2
ALLEGRO_SAMPLES: If the above is 1, the number of samples to use
per pixel.
Else 0.
.IP \[bu] 2
ALLEGRO_RENDER_METHOD: 0 if hardware acceleration is not used with
this display.
.IP \[bu] 2
ALLEGRO_FLOAT_COLOR: Whether to use floating point color
components.
.IP \[bu] 2
ALLEGRO_FLOAT_DEPTH: Whether to use a floating point depth buffer.
.IP \[bu] 2
ALLEGRO_SINGLE_BUFFER: Whether the display uses a single buffer (1)
or another update method (0).
.IP \[bu] 2
ALLEGRO_SWAP_METHOD: If the above is 0, this is set to 1 to
indicate the display is using a copying method to make the next
buffer in the flip chain available, or to 2 to indicate a flipping
or other method.
.IP \[bu] 2
ALLEGRO_COMPATIBLE_DISPLAY: Indicates if Allegro's graphics
functions can use this display.
If you request a display not useable by Allegro, you can still use
for example OpenGL to draw graphics.
.IP \[bu] 2
ALLEGRO_UPDATE_DISPLAY_REGION: Set to 1 if the display is capable
of updating just a region, and 0 if calling
al_update_display_region(3) is equivalent to al_flip_display(3).
.IP \[bu] 2
ALLEGRO_VSYNC: Set to 1 to tell the driver to wait for vsync in
al_flip_display(3), or to 2 to force vsync off.
The default of 0 means that Allegro does not try to modify the
vsync behavior so it may be on or off.
Note that even in the case of 1 or 2 it is possile to override the
vsync behavior in the graphics driver so you should not rely on it.
.IP \[bu] 2
ALLEGRO_MAX_BITMAP_SIZE: When queried this returns the maximum size
(width as well as height) a bitmap can have for this display.
Calls to al_create_bitmap(3) or al_load_bitmap(3) for bitmaps
larger than this size will fail.
It does not apply to memory bitmaps which always can have arbitrary
size (but are slow for drawing).
.IP \[bu] 2
ALLEGRO_SUPPORT_NPOT_BITMAP: Set to 1 if textures used for bitmaps
on this display can have a size which is not a power of two.
This is mostly useful if you use Allegro to load textures as
otherwise only power-of-two textures will be used internally as
bitmap storage.
.IP \[bu] 2
ALLEGRO_CAN_DRAW_INTO_BITMAP: Set to 1 if you can use
al_set_target_bitmap(3) on bitmaps of this display to draw into
them.
If this is not the case software emulation will be used when
drawing into display bitmaps (which can be very slow).
.IP \[bu] 2
ALLEGRO_SUPPORT_SEPARATE_ALPHA: This is set to 1 if the
al_set_separate_blender(3) function is supported.
Otherwise the alpha parameters will be ignored.
.PP
FIXME: document them all in detail
.SH SEE ALSO
.PP
al_set_new_display_flags(3)
